import pytest
import json
from cogency import Agent
from cogency.llm.gemini import GeminiLLM
from cogency.generation.shaper import ResponseShaper
from unittest.mock import AsyncMock


class TestResponseShaperIntegration:
    """Integration tests for ResponseShaper functionality involving LLM calls."""
    
    @pytest.mark.asyncio
    async def test_basic_agent_still_works(self, mock_llm_response):
        """Test that basic Agent functionality still works without ResponseShaper."""
        mock_llm_response.return_value = json.dumps({"action": "respond", "answer": "4"})
        agent = Agent(name="test")
        result = await agent.run("What is 2+2?")
        assert result
        assert "4" in result
        
    @pytest.mark.asyncio
    async def test_agent_with_response_shaper(self, mock_llm_response):
        """Test that Agent works with ResponseShaper config."""
        mock_llm_response.return_value = json.dumps({"action": "respond", "answer": "4"})
        agent = Agent(
            name="test",
            response_shaper={
                "format": "markdown",
                "tone": "friendly"
            }
        )
        result = await agent.run("What is 2+2?")
        assert result
        assert "4" in result
        
    @pytest.mark.asyncio
    async def test_agent_with_empty_response_shaper(self, mock_llm_response):
        """Test that Agent works with empty ResponseShaper config."""
        mock_llm_response.return_value = json.dumps({"action": "respond", "answer": "4"})
        agent = Agent(
            name="test",
            response_shaper={}
        )
        result = await agent.run("What is 2+2?")
        assert result
        assert "4" in result
        
    @pytest.mark.asyncio
    async def test_response_shaper_class_direct(self, mock_llm_response):
        """Test ResponseShaper class directly."""
        mock_llm_response.return_value = "The answer is 4. (transformed)"
        llm = GeminiLLM()
        shaper = ResponseShaper(llm)
        
        raw_response = "The answer is 4."
        config = {
            "format": "markdown",
            "tone": "friendly"
        }
        
        shaped_response = await shaper.shape(raw_response, config)
        assert shaped_response
        assert shaped_response != raw_response  # Should be transformed
