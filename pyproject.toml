[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "cogency"
version = "0.4.1"
description = "Agentic AI out of the box"
authors = [{ name = "Tyson Chan", email = "tyson.chan@proton.me" }]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/iteebz/cogency"
repository = "https://github.com/iteebz/cogency"
keywords = ["ai", "agents", "reasoning", "tools", "tracing", "cognition"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10,<4.0"
dependencies = [
    "pydantic>=2.0",
    "typing-extensions>=4.0",
    "langgraph",
    "ddgs>=9.0.0",
    "numpy>=1.24.0",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.12.14,<4.0.0",
    "psutil>=5.9.0",
    "mcp>=1.0.0",
    "pytest-timeout>=2.4.0,<3.0.0"
]

[project.optional-dependencies]
# LLM providers
openai = ["openai"]
anthropic = ["anthropic"]
gemini = ["google-generativeai"]
mistral = ["mistralai"]

# Embedding providers
sentence-transformers = ["sentence-transformers"]
nomic = ["nomic>=1.0.0"]

# Memory backends
chromadb = ["chromadb"]
pgvector = ["pgvector", "psycopg2-binary"]
pinecone = ["pinecone-client"]

# Convenience bundles
llm = ["openai", "anthropic", "google-generativeai", "mistralai"]
embed = ["sentence-transformers", "nomic>=1.0.0"]
memory = ["chromadb", "pgvector", "psycopg2-binary", "pinecone-client"]
all = [
    "openai", 
    "anthropic", 
    "google-generativeai", 
    "mistralai",
    "sentence-transformers", 
    "nomic>=1.0.0",
    "chromadb", 
    "pgvector", 
    "psycopg2-binary", 
    "pinecone-client"
]

[tool.poetry.group.dev.dependencies]
black = "^23.0.0"
isort = "^5.12.0"
pytest = "^8.4.1"
pytest-asyncio = "^0.21.0"

[tool.poetry]
packages = [{ include = "cogency", from = "src" }]

[tool.black]
line-length = 88
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "UP"]
ignore = ["W293", "UP006", "UP035"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
pythonpath = ["src"]